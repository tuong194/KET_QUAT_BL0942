C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\OBJ\MAIN.obj
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE ..\code\MAIN.C BROWSE INCDIR(..\code\BL0942) DEBUG OBJECTEXTEND PRINT(.\
                    -LST\MAIN.lst) OBJECT(.\OBJ\MAIN.obj)

line level    source

   1          /*********************************************************************
   2              Project:MG82F6D17-DEMO
   3              Author:LZD
   4                                  MG82F6D17 SSOP20_V10 EV Board (TH194A)
   5                                  CpuCLK=24MHz, SysCLK=48MHz
   6                  Description:
   7                                  SPI(nSS/P33,MOSI/P15,MISO/P16,SPICLK/P17) 
   8                                  Master 
   9                  Note:
  10          
  11              Creat time::
  12              Modify::
  13              
  14          *********************************************************************/
  15          #define _MAIN_C
  16          
  17          #include <Intrins.h>
  18          #include <Absacc.h>
  19          
  20          #include <Stdio.h>  // for printf
  21          #include <stdarg.h>
  22          #include <string.h>
  23          //#include <stdint.h>
  24          
  25          #include ".\include\REG_MG82F6D17.H"
  26          #include ".\include\Type.h"
  27          #include ".\include\API_Macro_MG82F6D17.H"
  28          #include ".\include\API_Uart_BRGRL_MG82F6D17.H"
  29          
  30          #define UART0_RX_BUFF_SIZE 32
  31          #define UART0_TX_BUFF_SIZE 32
  32          xdata u8 RcvBuf[UART0_RX_BUFF_SIZE];
  33          u8 Uart0RxIn = 0;
  34          u8 Uart0RxOut = 0;
  35          xdata u8 TxBuf[UART0_TX_BUFF_SIZE];
  36          u8 Uart0TxIn = 0;
  37          u8 Uart0TxOut = 0;
  38          bit bUart0TxFlag;
  39          
  40          #define IAP_END_ADDRESS 0x3400
  41          #define SIZE_DATA 9
  42          xdata uint8_t data_flash[SIZE_DATA];
  43          
  44          
  45          /*************************************************
  46          Set SysClk (MAX.50MHz) (MAX.50MHz)
  47          Selection: 
  48                  11059200,12000000,
  49                  22118400,24000000,
  50                  29491200,32000000,
  51                  44236800,48000000
  52          *************************************************/
  53          #define MCU_SYSCLK              24000000
  54          
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 2   

  55          /*************************************************/
  56          /*************************************************
  57          set CpuClk (MAX.36MHz)
  58                  1) CpuCLK=SysCLK
  59                  2) CpuClk=SysClk/2
  60          *************************************************/
  61          #define MCU_CPUCLK              (MCU_SYSCLK)
  62          //#define MCU_CPUCLK            (MCU_SYSCLK/2)
  63          
  64          #define TIMER_1T_1ms_TH ((65536-(u16)(float)(1000*((float)(MCU_SYSCLK)/(float)(1000000)))) /256)                        
  65          #define TIMER_1T_1ms_TL ((65536-(u16)(float)(1000*((float)(MCU_SYSCLK)/(float)(1000000)))) %256)
  66          
  67          #define TIMER_12T_1ms_TH        ((65536-(u16)(float)(1000*((float)(MCU_SYSCLK)/(float)(12000000)))) /256)                       
  68          #define TIMER_12T_1ms_TL        ((65536-(u16)(float)(1000*((float)(MCU_SYSCLK)/(float)(12000000)))) %256)
  69          
  70          #define SFR_Page_(x) SFRPI = x;
  71          
  72          #define LED_G_0         P33
  73          #define LED_R           P34
  74          #define LED_G_1         P35
  75          
  76          
  77          #define SPI_nSS         P33
  78          
  79          
  80          /***********************************************************************************
  81          Function:       void INT_UART0(void)
  82          Description:    UART0 Interrupt handler
  83          Input:
  84          Output:
  85          *************************************************************************************/
  86          void INT_UART0(void) interrupt INT_VECTOR_UART0
  87          {
  88   1              _push_(SFRPI);
  89   1      
  90   1              SFR_Page_(0);
  91   1              if (TI0)
  92   1              {
  93   2                      TI0 = 0;
  94   2                      if (Uart0TxIn == Uart0TxOut)
  95   2                      {
  96   3                              bUart0TxFlag = FALSE;
  97   3                      }
  98   2                      else
  99   2                      {
 100   3                              S0BUF = TxBuf[Uart0TxOut];
 101   3                              bUart0TxFlag = TRUE;
 102   3                              Uart0TxOut++;
 103   3                              if (Uart0TxOut >= UART0_TX_BUFF_SIZE)
 104   3                              {
 105   4                                      Uart0TxOut = 0;
 106   4                              }
 107   3                      }
 108   2              }
 109   1              if (RI0)
 110   1              {
 111   2                      RI0 = 0;
 112   2                      RcvBuf[Uart0RxIn] = S0BUF;
 113   2                      Uart0RxIn++;
 114   2                      if (Uart0RxIn >= UART0_RX_BUFF_SIZE)
 115   2                      {
 116   3                              Uart0RxIn = 0;
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 3   

 117   3                      }
 118   2              }
 119   1              _pop_(SFRPI);
 120   1      }
 121          
 122          
 123          u16 time_count = 0;
 124          u16 time_second = 0;
 125          u16 time_second_old = 0;
 126          u16 time_min = 0;
 127          u16 time_min_old = 0;
 128          u16 time_system = 0;
 129          u16 time_tick = 0;
 130          /***********************************************************************************
 131          Function:       void INT_T0(void)
 132          Description:    T0 Interrupt handler
 133          Input:
 134          Output:
 135          *************************************************************************************/
 136          void INT_T0(void) interrupt INT_VECTOR_T0  // Timer 1ms
 137          {
 138   1              TH0 = TIMER_12T_1ms_TH;
 139   1              TL0 = TIMER_12T_1ms_TL;
 140   1              time_system++;
 141   1              time_tick++;
 142   1              time_count++;
 143   1              if (time_count >= 999)
 144   1              {
 145   2                      time_count = 0;
 146   2                      time_second++;
 147   2              }
 148   1              if (time_second >= 59)
 149   1              {
 150   2                      time_second = 0;
 151   2                      time_min++;
 152   2                      if (time_min >= 65534)
 153   2                              time_min = 0;
 154   2              }
 155   1      }
 156          
 157          /***********************************************************************************
 158          Function:               void Uart0SendByte(u8 tByte)
 159          Description:    Uart0 send byte
 160          Input:                  u8 tByte: the data to be send
 161          Output:
 162          *************************************************************************************/
 163          void Uart0SendByte(u8 tByte)
 164          {
 165   1              u8 i;
 166   1      
 167   1              if (bUart0TxFlag == FALSE)
 168   1              {
 169   2                      Uart0TxOut = 0;
 170   2                      Uart0TxIn = 1;
 171   2                      TxBuf[0] = tByte;
 172   2                      TI0 = 1;
 173   2              }
 174   1              else
 175   1              {
 176   2                      i = Uart0TxIn;
 177   2                      TxBuf[i] = tByte;
 178   2                      i++;
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 4   

 179   2                      if (i >= UART0_TX_BUFF_SIZE)
 180   2                      {
 181   3                              i = 0;
 182   3                      }
 183   2                      while (i == Uart0TxOut)
 184   2                      {
 185   3                      }
 186   2                      ES0 = 0;
 187   2                      Uart0TxIn = i;
 188   2                      ES0 = 1;
 189   2              }
 190   1      }
 191          
 192          /***********************************************************************************
 193          Function:               void Uart0SendStr(BYTE* PStr)
 194          Description:    Uart0 send string
 195          Input:                  u8* PStr:the string to be send
 196          Output:
 197          *************************************************************************************/
 198          void Uart0SendStr(u8 *PStr)
 199          {
 200   1              while (*PStr != '\0')
 201   1              {
 202   2                      Uart0SendByte(*PStr);
 203   2                      PStr++;
 204   2              }
 205   1      }
 206          
 207          
 208          
 209          /*************************************************
 210          Function:       void DelayXus(u16 xUs)
 211          Description:    dealy��unit:us
 212          Input:                  u8 Us -> *1us  (1~255)
 213          Output:     
 214          *************************************************/
 215          void DelayXus(u8 xUs)
 216          {
 217   1              while(xUs!=0)
 218   1              {
 219   2      #if (MCU_CPUCLK>=11059200)
 220   2                      _nop_();
 221   2      #endif
 222   2      #if (MCU_CPUCLK>=14745600)
 223   2                      _nop_();
 224   2                      _nop_();
 225   2                      _nop_();
 226   2                      _nop_();
 227   2      #endif
 228   2      #if (MCU_CPUCLK>=16000000)
 229   2                      _nop_();
 230   2      #endif
 231   2      
 232   2      #if (MCU_CPUCLK>=22118400)
 233   2                      _nop_();
 234   2                      _nop_();
 235   2                      _nop_();
 236   2                      _nop_();
 237   2                      _nop_();
 238   2                      _nop_();
 239   2      #endif
 240   2      #if (MCU_CPUCLK>=24000000)
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 5   

 241   2                      _nop_();
 242   2                      _nop_();
 243   2      #endif          
 244   2      #if (MCU_CPUCLK>=29491200)
                              _nop_();
                              _nop_();
                              _nop_();
                              _nop_();
                              _nop_();
                              _nop_();
              #endif
 252   2      #if (MCU_CPUCLK>=32000000)
                              _nop_();
                              _nop_();
              #endif
 256   2      
 257   2                      xUs--;
 258   2              }
 259   1      }
 260          
 261          /*************************************************
 262          Function:       void DelayXms(u16 xMs)
 263          Description:    dealy��unit:ms
 264          Input:                  u16 xMs -> *1ms  (1~65535)
 265          Output:     
 266          *************************************************/
 267          void DelayXms(u16 xMs)
 268          {
 269   1              while(xMs!=0)
 270   1              {
 271   2                      CLRWDT();
 272   2                      DelayXus(200);
 273   2                      DelayXus(200);
 274   2                      DelayXus(200);
 275   2                      DelayXus(200);
 276   2                      DelayXus(200);
 277   2                      xMs--;
 278   2                      
 279   2              }
 280   1      }
 281          
 282          /***********************************************************************************
 283          Function:       void InitPort()
 284          Description:    Initialize IO Port
 285          Input:   
 286          Output:                 
 287          *************************************************************************************/
 288          void InitPort(void)
 289          {
 290   1              //SPI
 291   1              PORT_SetP1PushPull(BIT5|BIT7);                          // Set P15(MOSI),P17(SPICLK) as push-pull for output
 292   1              PORT_SetP1OpenDrainPu(BIT6);                            // Set P16(MISO) as open-drain with pull-high for digital input
 293   1              PORT_SetP3PushPull(BIT3);                                       // Set P33(nSS) as push-pull for output
 294   1              //UART
 295   1              PORT_SetP3QuasiBi(BIT0 | BIT1);  // rx tx
 296   1              //Pin
 297   1              PORT_SetP3OpenDrain(BIT4); // BTN
 298   1              PORT_SetP2AInputOnly(BIT4); // ZX_BL
 299   1              PORT_SetP2PushPull(BIT2); // relay
 300   1              PORT_SetP6PushPull(BIT0 | BIT1); // led
 301   1      
 302   1      }
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 6   

 303          
 304          /***********************************************************************************
 305          Function:       void InitInterrupt()
 306          Description:    Initialize Interrupt
 307          Input:
 308          Output:
 309          *************************************************************************************/
 310          void InitInterrupt(void)
 311          {
 312   1              INT_EnTIMER0(); // Enable Timer0 interrupt
 313   1              INT_EnUART0();  // Enable UART0 interrupt
 314   1              INT_EnAll();    // Enable global interrupt
 315   1      }
 316          
 317          /***********************************************************************************
 318          Function:       void InitUart0_S0BRG()
 319          Description:    Initialize Uart0, The source of baud rate was S0BRG
 320          Input:
 321          Output:
 322          *************************************************************************************/
 323          void InitUart0_S0BRG(void)
 324          {
 325   1              UART0_SetAccess_S0CR1();        // Enable access S0CR1
 326   1              UART0_SetMode8bitUARTVar(); // UART0 Mode: 8-bit, Variable B.R.
 327   1              UART0_EnReception();            // Enable reception
 328   1              UART0_SetBRGFromS0BRG();        // B.R. source: S0BRG
 329   1              UART0_SetS0BRGBaudRateX2(); // S0BRG x2
 330   1              UART0_SetS0BRGSelSYSCLK();      // S0BRG clock source: SYSCLK
 331   1      
 332   1              // Sets B.R. value
 333   1              UART0_SetS0BRGValue(S0BRG_BRGRL_115200_2X_24000000_1T);
 334   1      
 335   1              UART0_EnS0BRG(); // Enable S0BRG
 336   1      }
 337          
 338          /***********************************************************************************
 339          Function:       void InitTimer0()
 340          Description:    Initialize Timer0
 341          Input:
 342          Output:
 343          *************************************************************************************/
 344          
 345          void InitTimer0(void)
 346          {
 347   1              TM_SetT0Mode_1_16BIT_TIMER(); // TIMER0 Mode: 16-bit
 348   1              TM_SetT0Clock_SYSCLKDiv12();  // TIMER0 Clock source: SYSCLK/12
 349   1              TM_SetT0Gate_Disable();           // TIMER0 disable gate
 350   1      
 351   1              TM_SetT0LowByte(TIMER_12T_1ms_TL);      // Set TL0 value
 352   1              TM_SetT0HighByte(TIMER_12T_1ms_TH); // Set TH0 value
 353   1      
 354   1              TM_EnableT0(); // Enable TIMER0
 355   1      }
 356          
 357          
 358          /***********************************************************************************
 359          Function:       void IAP_ErasePage(u8 ByteAddr)
 360          Description:    Erase one page
 361          Input:                  u8 ByteAddr: IAP Address High byte
 362          
 363          Output:
 364          *************************************************************************************/
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 7   

 365          void IAP_ErasePage(u8 ByteAddr)
 366          {
 367   1              bit bEA = EA;
 368   1              IFADRH = ByteAddr; // IAP Address High byte
 369   1              IFADRL = 0x00;     // must 0x00
 370   1              EA = 0;
 371   1              IFMT = ISP_ERASE; // Erase
 372   1              ISPCR = 0x80;     // Enable ISP/IAP
 373   1                                                //            CheckTrapFlag();
 374   1              SCMD = 0x46;
 375   1              //              CheckTrapFlag();
 376   1              SCMD = 0xB9;
 377   1              nop();
 378   1              IFMT = 0;
 379   1              ISPCR = 0; // clear
 380   1              EA = bEA;
 381   1      }
 382          
 383          /***********************************************************************************
 384          Function:               void IAP_WritePPage(u8 PsfrAddr,u8 PsfrData)
 385          Description:    write P page sfr
 386          Input:
 387                                          u8 PsfrAddr: sfr Address
 388                                          u8 PsfrData: sfr data
 389          Output:
 390          *************************************************************************************/
 391          void IAP_WritePPage(u8 PsfrAddr, u8 PsfrData)
 392          {
 393   1              bit bEA = EA;
 394   1              EA = 0;                         //
 395   1              IFADRH = 0;                     // IFADRH must be 0
 396   1              IFADRL = PsfrAddr;      // sfr Address
 397   1              IFD = PsfrData;         // sfr data
 398   1              IFMT = ISP_WRITE_P; // write P page sfr
 399   1              ISPCR = 0x80;           // Enable ISP/IAP
 400   1                                                      //      CheckTrapFlag();
 401   1              SCMD = 0x46;
 402   1              //      CheckTrapFlag();
 403   1              SCMD = 0xB9;
 404   1              nop();
 405   1              IFMT = 0;
 406   1              ISPCR = 0; // clear
 407   1              EA = bEA;
 408   1      }
 409          
 410          /***********************************************************************************
 411          Function:       void IAP_WriteByte(u16 ByteAddr,u8 ByteData)
 412          Description:    write one byte to IAP
 413          Input:                  u16 ByteAddr: IAP Address
 414                                          u8 ByteData: the data to be write
 415          Output:
 416          *************************************************************************************/
 417          void IAP_WriteByte(u16 ByteAddr, u8 ByteData)
 418          {
 419   1              bit bEA = EA;
 420   1              IFD = ByteData;                 // data to be write
 421   1              IFADRH = ByteAddr >> 8; // IAP address high
 422   1              IFADRL = ByteAddr;              // IAP address low
 423   1              EA = 0;                                 //
 424   1              IFMT = ISP_WRITE;               // write
 425   1              ISPCR = 0x80;                   // Enable ISP/IAP
 426   1                                                              //              CheckTrapFlag();
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 8   

 427   1              SCMD = 0x46;
 428   1              //              CheckTrapFlag();
 429   1              SCMD = 0xB9;
 430   1              nop();
 431   1              IFMT = 0;
 432   1              ISPCR = 0; // clear
 433   1              EA = bEA;
 434   1      }
 435          
 436          // Read IAP data by MOVC
 437          #define IAP_ReadByteByMOVC(x) CBYTE[x]
 438          
 439          void write_data_fash(void)
 440          {
 441   1              u8 i = 0;
 442   1              IAP_WritePPage(IAPLB_P, IAP_END_ADDRESS / 256);
 443   1              IAP_ErasePage(IAP_END_ADDRESS / 256);
 444   1              for (i = 0; i < SIZE_DATA; i++)
 445   1              {
 446   2                      IAP_WriteByte(IAP_END_ADDRESS + i, data_flash[i]);
 447   2              }
 448   1      }
 449          
 450          
 451          unsigned char read_data_flash(unsigned char j)
 452          {
 453   1              unsigned char data_read;
 454   1              data_read = IAP_ReadByteByMOVC(IAP_END_ADDRESS + j);
 455   1              return data_read;
 456   1      }
 457          
 458          /***********************************************************************************
 459          Function:       void InitSPI()
 460          Description:    Initialize SPI
 461          Input:   
 462          Output:                 
 463          *************************************************************************************/
 464          void InitSPI(void)
 465          {
 466   1              
 467   1              SPI_Enable();                                                                   // Enable SPI
 468   1              SPI_SelectMASTERByMSTRbit();                                    // Set to MASTER
 469   1              SPI_SetClock(SPI_CLK_SYSCLK_32);                                        // Set Clock SYSCLK/32 = 24M/32= 750 KHz
 470   1              SPI_SetCPOL_0();                                                                // CPOL=0 
 471   1              SPI_SetDataMSB();                                                               // Data MSB
 472   1              SPI_SetCPHA_1();                                                                // CPHA=1
 473   1              SPI_SetUseP33P15P16P17();                                               // IO Port: nSS/P33,MOSI/P15,MISO/P16,SPICLK/P17
 474   1      
 475   1      }
 476          
 477          /***********************************************************************************
 478          Function:       u8 SPITransceiver(u8 SPI_DATA)
 479          Description:    SPI Master transmit 
 480          Input:                  u8 SPI_DATA: Data to be send
 481          Output:                 u8:  Received data
 482          *************************************************************************************/
 483          u8 SPITransceiver(u8 SPI_DATA)
 484          {
 485   1              SPI_SendData(SPI_DATA);                                                 // Send data
 486   1              while(SPI_ChkCompleteFlag()==0);                                // Wait complete
 487   1              SPI_ClearCompleteFlag();                                                // Clear flag
 488   1              return SPI_GetData();                                                   // Return data
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 9   

 489   1      }
 490          
 491          /***********************************************************************************
 492          Function:       void InitClock()
 493          Description:    Initialize clock
 494          Input:   
 495          Output:                 
 496          *************************************************************************************/
 497          void InitClock(void)
 498          {
 499   1      #if (MCU_SYSCLK==11059200)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // SysClk=11.0592MHz CpuClk=11.0592MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1);
                      
              #else
                      // SysClk=11.0592MHz CpuClk=5.5296MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1);
              #endif
              #endif
 509   1      
 510   1      #if (MCU_SYSCLK==12000000)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // SysClk=12MHz CpuClk=12MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1);
                      
              #else
                      // SysClk=12MHz CpuClk=6MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1);
              #endif
              #endif
 520   1      
 521   1      #if (MCU_SYSCLK==22118400)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // SysClk=22.1184MHz CpuClk=22.1184MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx4, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4|OSCIn_IHRCO);
              #else
                      // SysClk=22.1184MHz CpuClk=11.0592MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx4, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4|OSCIn_IHRCO);
              #endif
              #endif
 536   1      
 537   1      #if (MCU_SYSCLK==24000000)
 538   1      #if (MCU_CPUCLK==MCU_SYSCLK)
 539   1              // SysClk=24MHz CpuClk=24MHz
 540   1              CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
 541   1              DelayXus(100);
 542   1              // IHRCO, MCK=CKMIx4, OSCin=IHRCO
 543   1              CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4|OSCIn_IHRCO);
 544   1      #else
                      // SysClk=24MHz CpuClk=12MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx4, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4|OSCIn_IHRCO);
              #endif
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 10  

 551   1      #endif
 552   1      
 553   1      #if (MCU_SYSCLK==29491200)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // Cpuclk high speed
                      CLK_SetCpuCLK_HighSpeed();
                      // SysClk=29.491200MHz CpuClk=29.491200MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx5.33, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X533|OSCIn_IHRCO);
              #else
                      // SysClk=29.491200MHz CpuClk=14.7456MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx5.33, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X533|OSCIn_IHRCO);
              #endif
              #endif
 570   1      
 571   1      #if (MCU_SYSCLK==32000000)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // Cpuclk high speed
                      CLK_SetCpuCLK_HighSpeed();
                      // SysClk=32MHz CpuClk=32MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx5.33, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X533|OSCIn_IHRCO);
              #else
                      // SysClk=32MHz CpuClk=16MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx5.33, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X533|OSCIn_IHRCO);
              #endif
              #endif
 588   1      
 589   1      #if (MCU_SYSCLK==36000000)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // Cpuclk high speed
                      CLK_SetCpuCLK_HighSpeed();
                      // CKMIx6,x8,x12
                      CLK_SetCKM_x6x8x12();   
                      // SysClk=36MHz CpuClk=18MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx6, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4_X6|OSCIn_IHRCO);
              #else
                      // CKMIx6,x8,x12
                      CLK_SetCKM_x6x8x12();   
                      // SysClk=36MHz CpuClk=18MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx6, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4_X6|OSCIn_IHRCO);
              #endif
              #endif
 610   1      
 611   1      
 612   1      #if (MCU_SYSCLK==44236800)
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 11  

                      // SysClk=44.2368MHz CpuClk=22.1184MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx8, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X8|OSCIn_IHRCO);
              #endif
 619   1      
 620   1      #if (MCU_SYSCLK==48000000)
                      // SysClk=48MHz CpuClk=24MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx8, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X8|OSCIn_IHRCO);
              #endif
 627   1      
 628   1              // P60 Output MCK/4
 629   1              //CLK_P60OC_MCKDiv4();
 630   1      }
 631          
 632          
 633          /***********************************************************************************
 634          Function:       void InitSystem(void)
 635          Description:    Initialize MCU
 636          Input:   
 637          Output:     
 638          *************************************************************************************/
 639          void InitSystem(void)
 640          {
 641   1              InitPort();
 642   1              InitClock();
 643   1              InitSPI();
 644   1              InitTimer0();
 645   1              InitUart0_S0BRG();
 646   1              InitInterrupt();
 647   1      
 648   1              WDT_SetClock_32K_DIV_64_1024ms();
 649   1              WDT_EnReset(); // enable WDT reset MCU
 650   1              WDT_Enable();  // enable WDT
 651   1      }
 652          
 653          /*
 654          int sprintf (char *__stream, const char *__format, ...)
 655          {
 656            register int __retval;
 657            __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
 658            __retval = __mingw_vsprintf( __stream, __format, __local_argv );
 659            __builtin_va_end( __local_argv );
 660            return __retval;
 661          }
 662          */
 663          void rd_print(const char *__format, ...){
 664   1              xdata uint8_t Buff_print[32] = {0};
 665   1              char *__stream = &Buff_print[0];
 666   1              va_list __local_argv;
 667   1              va_start( __local_argv, __format );
 668   1              vsprintf( __stream, __format, __local_argv );
 669   1              va_end( __local_argv );
 670   1              Uart0SendStr(Buff_print);
 671   1      
 672   1      }
 673          
 674          void RD_Send_Byte_SPI(u8 data_b){
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 16:06:34 PAGE 12  

 675   1                      SPI_nSS=0;                      
 676   1                      SPITransceiver(data_b); 
 677   1                      SPI_nSS=1;
 678   1      }
 679          void RD_Send_String_SPI(u8 *data_str){
 680   1              while(*data_str != NULL){
 681   2                      RD_Send_Byte_SPI(*data_str++);
 682   2              }
 683   1      }
 684          
 685          
 686          xdata int8_t data_sendx[6] = {12, 123, 15, 16, 17, 18};
 687          // int xxx = 123;
 688          // int xxx2 = 13;
 689          
 690          void main()
 691          {
 692   1          InitSystem();
 693   1              /*====================UART========================*/
 694   1              Uart0RxIn = 0;
 695   1              Uart0RxOut = 0;
 696   1              Uart0TxIn = 0;
 697   1              Uart0TxOut = 0;
 698   1              bUart0TxFlag = 0;
 699   1              /*================================================*/
 700   1              DelayXms(1000);
 701   1              Uart0SendStr("hello\n");
 702   1              
 703   1              
 704   1          while(1)
 705   1          {   
 706   2      
 707   2                      WDT_Clear();
 708   2      
 709   2                      rd_print("arr: %d %d %d %d %d %d\n", data_sendx[0], data_sendx[1], data_sendx[2], data_sendx[3], data_se
             -ndx[4], data_sendx[5]);
 710   2      
 711   2                      rd_print("helloaaa\n\n");
 712   2                      
 713   2                      DelayXms(1500);
 714   2                      
 715   2          }
 716   1      }
 717          
 718          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1013    ----
   CONSTANT SIZE    =     74    ----
   XDATA SIZE       =     79      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
