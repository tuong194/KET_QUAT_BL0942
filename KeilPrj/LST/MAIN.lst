C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\OBJ\MAIN.obj
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE ..\code\MAIN.C BROWSE DEBUG OBJECTEXTEND PRINT(.\LST\MAIN.lst) OBJECT(.\
                    -OBJ\MAIN.obj)

line level    source

   1          /*********************************************************************
   2              Project:MG82F6D17-DEMO
   3              Author:LZD
   4                                  MG82F6D17 SSOP20_V10 EV Board (TH194A)
   5                                  CpuCLK=24MHz, SysCLK=48MHz
   6                  Description:
   7                                  SPI(nSS/P33,MOSI/P15,MISO/P16,SPICLK/P17) 
   8                                  Master 
   9                  Note:
  10          
  11              Creat time::
  12              Modify::
  13              
  14          *********************************************************************/
  15          #define _MAIN_C
  16          
  17          #include <Intrins.h>
  18          #include <Absacc.h>
  19          
  20          #include <Stdio.h>  // for printf
  21          #include <math.h>
  22          
  23          #include ".\include\REG_MG82F6D17.H"
  24          #include ".\include\Type.h"
  25          #include ".\include\API_Macro_MG82F6D17.H"
  26          #include ".\include\API_Uart_BRGRL_MG82F6D17.H"
  27          
  28          #define UART0_RX_BUFF_SIZE 32
  29          #define UART0_TX_BUFF_SIZE 32
  30          xdata u8 RcvBuf[UART0_RX_BUFF_SIZE];
  31          u8 Uart0RxIn = 0;
  32          u8 Uart0RxOut = 0;
  33          xdata u8 TxBuf[UART0_TX_BUFF_SIZE];
  34          u8 Uart0TxIn = 0;
  35          u8 Uart0TxOut = 0;
  36          bit bUart0TxFlag;
  37          
  38          #define IAP_END_ADDRESS 0x3400
  39          #define SIZE_DATA 9
  40          xdata uint8_t data_flash[SIZE_DATA];
  41          
  42          
  43          /*************************************************
  44          Set SysClk (MAX.50MHz) (MAX.50MHz)
  45          Selection: 
  46                  11059200,12000000,
  47                  22118400,24000000,
  48                  29491200,32000000,
  49                  44236800,48000000
  50          *************************************************/
  51          #define MCU_SYSCLK              24000000
  52          
  53          /*************************************************/
  54          /*************************************************
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 2   

  55          set CpuClk (MAX.36MHz)
  56                  1) CpuCLK=SysCLK
  57                  2) CpuClk=SysClk/2
  58          *************************************************/
  59          #define MCU_CPUCLK              (MCU_SYSCLK)
  60          //#define MCU_CPUCLK            (MCU_SYSCLK/2)
  61          
  62          #define TIMER_1T_1ms_TH ((65536-(u16)(float)(1000*((float)(MCU_SYSCLK)/(float)(1000000)))) /256)                        
  63          #define TIMER_1T_1ms_TL ((65536-(u16)(float)(1000*((float)(MCU_SYSCLK)/(float)(1000000)))) %256)
  64          
  65          #define TIMER_12T_1ms_TH        ((65536-(u16)(float)(1000*((float)(MCU_SYSCLK)/(float)(12000000)))) /256)                       
  66          #define TIMER_12T_1ms_TL        ((65536-(u16)(float)(1000*((float)(MCU_SYSCLK)/(float)(12000000)))) %256)
  67          
  68          #define LED_G_0         P33
  69          #define LED_R           P34
  70          #define LED_G_1         P35
  71          
  72          
  73          #define SPI_nSS         P33
  74          
  75          
  76          u16 time_count = 0;
  77          u16 time_second = 0;
  78          u16 time_second_old = 0;
  79          u16 time_min = 0;
  80          u16 time_min_old = 0;
  81          u16 time_system = 0;
  82          u16 time_tick = 0;
  83          /***********************************************************************************
  84          Function:       void INT_T0(void)
  85          Description:    T0 Interrupt handler
  86          Input:
  87          Output:
  88          *************************************************************************************/
  89          void INT_T0(void) interrupt INT_VECTOR_T0  // Timer 1ms
  90          {
  91   1              TH0 = TIMER_12T_1ms_TH;
  92   1              TL0 = TIMER_12T_1ms_TL;
  93   1              time_system++;
  94   1              time_tick++;
  95   1              time_count++;
  96   1              if (time_count >= 999)
  97   1              {
  98   2                      time_count = 0;
  99   2                      time_second++;
 100   2              }
 101   1              if (time_second >= 59)
 102   1              {
 103   2                      time_second = 0;
 104   2                      time_min++;
 105   2                      if (time_min >= 65534)
 106   2                              time_min = 0;
 107   2              }
 108   1      }
 109          
 110          /***********************************************************************************
 111          Function:               void Uart0SendByte(u8 tByte)
 112          Description:    Uart0 send byte
 113          Input:                  u8 tByte: the data to be send
 114          Output:
 115          *************************************************************************************/
 116          void Uart0SendByte(u8 tByte)
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 3   

 117          {
 118   1              u8 i;
 119   1      
 120   1              if (bUart0TxFlag == FALSE)
 121   1              {
 122   2                      Uart0TxOut = 0;
 123   2                      Uart0TxIn = 1;
 124   2                      TxBuf[0] = tByte;
 125   2                      TI0 = 1;
 126   2              }
 127   1              else
 128   1              {
 129   2                      i = Uart0TxIn;
 130   2                      TxBuf[i] = tByte;
 131   2                      i++;
 132   2                      if (i >= UART0_TX_BUFF_SIZE)
 133   2                      {
 134   3                              i = 0;
 135   3                      }
 136   2                      while (i == Uart0TxOut)
 137   2                      {
 138   3                      }
 139   2                      ES0 = 0;
 140   2                      Uart0TxIn = i;
 141   2                      ES0 = 1;
 142   2              }
 143   1      }
 144          
 145          /***********************************************************************************
 146          Function:               void Uart0SendStr(BYTE* PStr)
 147          Description:    Uart0 send string
 148          Input:                  u8* PStr:the string to be send
 149          Output:
 150          *************************************************************************************/
 151          void Uart0SendStr(u8 *PStr)
 152          {
 153   1              while (*PStr != 0)
 154   1              {
 155   2                      Uart0SendByte(*PStr);
 156   2                      PStr++;
 157   2              }
 158   1      }
 159          
 160          
 161          
 162          /*************************************************
 163          Function:       void DelayXus(u16 xUs)
 164          Description:    dealy��unit:us
 165          Input:                  u8 Us -> *1us  (1~255)
 166          Output:     
 167          *************************************************/
 168          void DelayXus(u8 xUs)
 169          {
 170   1              while(xUs!=0)
 171   1              {
 172   2      #if (MCU_CPUCLK>=11059200)
 173   2                      _nop_();
 174   2      #endif
 175   2      #if (MCU_CPUCLK>=14745600)
 176   2                      _nop_();
 177   2                      _nop_();
 178   2                      _nop_();
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 4   

 179   2                      _nop_();
 180   2      #endif
 181   2      #if (MCU_CPUCLK>=16000000)
 182   2                      _nop_();
 183   2      #endif
 184   2      
 185   2      #if (MCU_CPUCLK>=22118400)
 186   2                      _nop_();
 187   2                      _nop_();
 188   2                      _nop_();
 189   2                      _nop_();
 190   2                      _nop_();
 191   2                      _nop_();
 192   2      #endif
 193   2      #if (MCU_CPUCLK>=24000000)
 194   2                      _nop_();
 195   2                      _nop_();
 196   2      #endif          
 197   2      #if (MCU_CPUCLK>=29491200)
                              _nop_();
                              _nop_();
                              _nop_();
                              _nop_();
                              _nop_();
                              _nop_();
              #endif
 205   2      #if (MCU_CPUCLK>=32000000)
                              _nop_();
                              _nop_();
              #endif
 209   2      
 210   2                      xUs--;
 211   2              }
 212   1      }
 213          
 214          /*************************************************
 215          Function:       void DelayXms(u16 xMs)
 216          Description:    dealy��unit:ms
 217          Input:                  u16 xMs -> *1ms  (1~65535)
 218          Output:     
 219          *************************************************/
 220          void DelayXms(u16 xMs)
 221          {
 222   1              while(xMs!=0)
 223   1              {
 224   2                      CLRWDT();
 225   2                      DelayXus(200);
 226   2                      DelayXus(200);
 227   2                      DelayXus(200);
 228   2                      DelayXus(200);
 229   2                      DelayXus(200);
 230   2                      xMs--;
 231   2                      
 232   2              }
 233   1      }
 234          
 235          /***********************************************************************************
 236          Function:       void InitPort()
 237          Description:    Initialize IO Port
 238          Input:   
 239          Output:                 
 240          *************************************************************************************/
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 5   

 241          void InitPort(void)
 242          {
 243   1              //SPI
 244   1              PORT_SetP1PushPull(BIT5|BIT7);                          // Set P15(MOSI),P17(SPICLK) as push-pull for output
 245   1              PORT_SetP1OpenDrainPu(BIT6);                            // Set P16(MISO) as open-drain with pull-high for digital input
 246   1              PORT_SetP3PushPull(BIT3);                                       // Set P33(nSS) as push-pull for output
 247   1              //UART
 248   1              PORT_SetP3QuasiBi(BIT0 | BIT1);  // rx tx
 249   1      
 250   1      }
 251          
 252          /***********************************************************************************
 253          Function:       void InitInterrupt()
 254          Description:    Initialize Interrupt
 255          Input:
 256          Output:
 257          *************************************************************************************/
 258          void InitInterrupt(void)
 259          {
 260   1              INT_EnTIMER0(); // Enable Timer0 interrupt
 261   1              INT_EnUART0();  // Enable UART0 interrupt
 262   1              INT_EnAll();    // Enable global interrupt
 263   1      }
 264          
 265          /***********************************************************************************
 266          Function:       void InitUart0_S0BRG()
 267          Description:    Initialize Uart0, The source of baud rate was S0BRG
 268          Input:
 269          Output:
 270          *************************************************************************************/
 271          void InitUart0_S0BRG(void)
 272          {
 273   1              UART0_SetAccess_S0CR1();        // Enable access S0CR1
 274   1              UART0_SetMode8bitUARTVar(); // UART0 Mode: 8-bit, Variable B.R.
 275   1              UART0_EnReception();            // Enable reception
 276   1              UART0_SetBRGFromS0BRG();        // B.R. source: S0BRG
 277   1              UART0_SetS0BRGBaudRateX2(); // S0BRG x2
 278   1              UART0_SetS0BRGSelSYSCLK();      // S0BRG clock source: SYSCLK
 279   1      
 280   1              // Sets B.R. value
 281   1              UART0_SetS0BRGValue(S0BRG_BRGRL_115200_2X_24000000_1T);
 282   1      
 283   1              UART0_EnS0BRG(); // Enable S0BRG
 284   1      }
 285          
 286          /***********************************************************************************
 287          Function:       void InitTimer0()
 288          Description:    Initialize Timer0
 289          Input:
 290          Output:
 291          *************************************************************************************/
 292          
 293          void InitTimer0(void)
 294          {
 295   1              TM_SetT0Mode_1_16BIT_TIMER(); // TIMER0 Mode: 16-bit
 296   1              TM_SetT0Clock_SYSCLKDiv12();  // TIMER0 Clock source: SYSCLK/12
 297   1              TM_SetT0Gate_Disable();           // TIMER0 disable gate
 298   1      
 299   1              TM_SetT0LowByte(TIMER_12T_1ms_TL);      // Set TL0 value
 300   1              TM_SetT0HighByte(TIMER_12T_1ms_TH); // Set TH0 value
 301   1      
 302   1              TM_EnableT0(); // Enable TIMER0
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 6   

 303   1      }
 304          
 305          
 306          /***********************************************************************************
 307          Function:       void IAP_ErasePage(u8 ByteAddr)
 308          Description:    Erase one page
 309          Input:                  u8 ByteAddr: IAP Address High byte
 310          
 311          Output:
 312          *************************************************************************************/
 313          void IAP_ErasePage(u8 ByteAddr)
 314          {
 315   1              bit bEA = EA;
 316   1              IFADRH = ByteAddr; // IAP Address High byte
 317   1              IFADRL = 0x00;     // must 0x00
 318   1              EA = 0;
 319   1              IFMT = ISP_ERASE; // Erase
 320   1              ISPCR = 0x80;     // Enable ISP/IAP
 321   1                                                //            CheckTrapFlag();
 322   1              SCMD = 0x46;
 323   1              //              CheckTrapFlag();
 324   1              SCMD = 0xB9;
 325   1              nop();
 326   1              IFMT = 0;
 327   1              ISPCR = 0; // clear
 328   1              EA = bEA;
 329   1      }
 330          
 331          /***********************************************************************************
 332          Function:               void IAP_WritePPage(u8 PsfrAddr,u8 PsfrData)
 333          Description:    write P page sfr
 334          Input:
 335                                          u8 PsfrAddr: sfr Address
 336                                          u8 PsfrData: sfr data
 337          Output:
 338          *************************************************************************************/
 339          void IAP_WritePPage(u8 PsfrAddr, u8 PsfrData)
 340          {
 341   1              bit bEA = EA;
 342   1              EA = 0;                         //
 343   1              IFADRH = 0;                     // IFADRH must be 0
 344   1              IFADRL = PsfrAddr;      // sfr Address
 345   1              IFD = PsfrData;         // sfr data
 346   1              IFMT = ISP_WRITE_P; // write P page sfr
 347   1              ISPCR = 0x80;           // Enable ISP/IAP
 348   1                                                      //      CheckTrapFlag();
 349   1              SCMD = 0x46;
 350   1              //      CheckTrapFlag();
 351   1              SCMD = 0xB9;
 352   1              nop();
 353   1              IFMT = 0;
 354   1              ISPCR = 0; // clear
 355   1              EA = bEA;
 356   1      }
 357          
 358          /***********************************************************************************
 359          Function:       void IAP_WriteByte(u16 ByteAddr,u8 ByteData)
 360          Description:    write one byte to IAP
 361          Input:                  u16 ByteAddr: IAP Address
 362                                          u8 ByteData: the data to be write
 363          Output:
 364          *************************************************************************************/
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 7   

 365          void IAP_WriteByte(u16 ByteAddr, u8 ByteData)
 366          {
 367   1              bit bEA = EA;
 368   1              IFD = ByteData;                 // data to be write
 369   1              IFADRH = ByteAddr >> 8; // IAP address high
 370   1              IFADRL = ByteAddr;              // IAP address low
 371   1              EA = 0;                                 //
 372   1              IFMT = ISP_WRITE;               // write
 373   1              ISPCR = 0x80;                   // Enable ISP/IAP
 374   1                                                              //              CheckTrapFlag();
 375   1              SCMD = 0x46;
 376   1              //              CheckTrapFlag();
 377   1              SCMD = 0xB9;
 378   1              nop();
 379   1              IFMT = 0;
 380   1              ISPCR = 0; // clear
 381   1              EA = bEA;
 382   1      }
 383          
 384          // Read IAP data by MOVC
 385          #define IAP_ReadByteByMOVC(x) CBYTE[x]
 386          
 387          void write_data_fash(void)
 388          {
 389   1              u8 i = 0;
 390   1              IAP_WritePPage(IAPLB_P, IAP_END_ADDRESS / 256);
 391   1              IAP_ErasePage(IAP_END_ADDRESS / 256);
 392   1              for (i = 0; i < SIZE_DATA; i++)
 393   1              {
 394   2                      IAP_WriteByte(IAP_END_ADDRESS + i, data_flash[i]);
 395   2              }
 396   1      }
 397          
 398          
 399          unsigned char read_data_flash(unsigned char j)
 400          {
 401   1              unsigned char data_read;
 402   1              data_read = IAP_ReadByteByMOVC(IAP_END_ADDRESS + j);
 403   1              return data_read;
 404   1      }
 405          
 406          /***********************************************************************************
 407          Function:       void InitSPI()
 408          Description:    Initialize SPI
 409          Input:   
 410          Output:                 
 411          *************************************************************************************/
 412          void InitSPI(void)
 413          {
 414   1              
 415   1              SPI_Enable();                                                                   // Enable SPI
 416   1              SPI_SelectMASTERByMSTRbit();                                    // Set to MASTER
 417   1              SPI_SetClock(SPI_CLK_SYSCLK_32);                                        // Set Clock SYSCLK/4 48M/4=12M
 418   1              SPI_SetCPOL_0();                                                                // CPOL=0 
 419   1              SPI_SetDataMSB();                                                               // Data MSB
 420   1              SPI_SetCPHA_1();                                                                // CPHA=1
 421   1              SPI_SetUseP33P15P16P17();                                               // IO Port: nSS/P33,MOSI/P15,MISO/P16,SPICLK/P17
 422   1      
 423   1      }
 424          
 425          /***********************************************************************************
 426          Function:       u8 SPITransceiver(u8 SPI_DATA)
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 8   

 427          Description:    SPI Master transmit 
 428          Input:                  u8 SPI_DATA: Data to be send
 429          Output:                 u8:  Received data
 430          *************************************************************************************/
 431          u8 SPITransceiver(u8 SPI_DATA)
 432          {
 433   1              SPI_SendData(SPI_DATA);                                                 // Send data
 434   1              while(SPI_ChkCompleteFlag()==0);                                // Wait complete
 435   1              SPI_ClearCompleteFlag();                                                // Clear flag
 436   1              return SPI_GetData();                                                   // Return data
 437   1      }
 438          
 439          /***********************************************************************************
 440          Function:       void InitClock()
 441          Description:    Initialize clock
 442          Input:   
 443          Output:                 
 444          *************************************************************************************/
 445          void InitClock(void)
 446          {
 447   1      #if (MCU_SYSCLK==11059200)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // SysClk=11.0592MHz CpuClk=11.0592MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1);
                      
              #else
                      // SysClk=11.0592MHz CpuClk=5.5296MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1);
              #endif
              #endif
 457   1      
 458   1      #if (MCU_SYSCLK==12000000)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // SysClk=12MHz CpuClk=12MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1);
                      
              #else
                      // SysClk=12MHz CpuClk=6MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1);
              #endif
              #endif
 468   1      
 469   1      #if (MCU_SYSCLK==22118400)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // SysClk=22.1184MHz CpuClk=22.1184MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx4, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4|OSCIn_IHRCO);
              #else
                      // SysClk=22.1184MHz CpuClk=11.0592MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx4, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4|OSCIn_IHRCO);
              #endif
              #endif
 484   1      
 485   1      #if (MCU_SYSCLK==24000000)
 486   1      #if (MCU_CPUCLK==MCU_SYSCLK)
 487   1              // SysClk=24MHz CpuClk=24MHz
 488   1              CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 9   

 489   1              DelayXus(100);
 490   1              // IHRCO, MCK=CKMIx4, OSCin=IHRCO
 491   1              CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4|OSCIn_IHRCO);
 492   1      #else
                      // SysClk=24MHz CpuClk=12MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx4, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4|OSCIn_IHRCO);
              #endif
 499   1      #endif
 500   1      
 501   1      #if (MCU_SYSCLK==29491200)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // Cpuclk high speed
                      CLK_SetCpuCLK_HighSpeed();
                      // SysClk=29.491200MHz CpuClk=29.491200MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx5.33, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X533|OSCIn_IHRCO);
              #else
                      // SysClk=29.491200MHz CpuClk=14.7456MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx5.33, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X533|OSCIn_IHRCO);
              #endif
              #endif
 518   1      
 519   1      #if (MCU_SYSCLK==32000000)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // Cpuclk high speed
                      CLK_SetCpuCLK_HighSpeed();
                      // SysClk=32MHz CpuClk=32MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx5.33, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X533|OSCIn_IHRCO);
              #else
                      // SysClk=32MHz CpuClk=16MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx5.33, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X533|OSCIn_IHRCO);
              #endif
              #endif
 536   1      
 537   1      #if (MCU_SYSCLK==36000000)
              #if (MCU_CPUCLK==MCU_SYSCLK)
                      // Cpuclk high speed
                      CLK_SetCpuCLK_HighSpeed();
                      // CKMIx6,x8,x12
                      CLK_SetCKM_x6x8x12();   
                      // SysClk=36MHz CpuClk=18MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx6, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4_X6|OSCIn_IHRCO);
              #else
                      // CKMIx6,x8,x12
                      CLK_SetCKM_x6x8x12();   
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 10  

                      // SysClk=36MHz CpuClk=18MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx6, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X4_X6|OSCIn_IHRCO);
              #endif
              #endif
 558   1      
 559   1      
 560   1      #if (MCU_SYSCLK==44236800)
                      // SysClk=44.2368MHz CpuClk=22.1184MHz
                      CLK_SetCKCON0(IHRCO_110592MHz|CPUCLK_SYSCLK_DIV_1|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx8, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X8|OSCIn_IHRCO);
              #endif
 567   1      
 568   1      #if (MCU_SYSCLK==48000000)
                      // SysClk=48MHz CpuClk=24MHz
                      CLK_SetCKCON0(IHRCO_12MHz|CPUCLK_SYSCLK_DIV_2|SYSCLK_MCKDO_DIV_1|ENABLE_CKM|CKM_OSCIN_DIV_2);
                      DelayXus(100);
                      // IHRCO, MCK=CKMIx8, OSCin=IHRCO
                      CLK_SetCKCON2(ENABLE_IHRCO|MCK_CKMI_X8|OSCIn_IHRCO);
              #endif
 575   1      
 576   1              // P60 Output MCK/4
 577   1              //CLK_P60OC_MCKDiv4();
 578   1      }
 579          
 580          
 581          /***********************************************************************************
 582          Function:       void InitSystem(void)
 583          Description:    Initialize MCU
 584          Input:   
 585          Output:     
 586          *************************************************************************************/
 587          void InitSystem(void)
 588          {
 589   1              InitPort();
 590   1              InitClock();
 591   1              InitSPI();
 592   1              InitTimer0();
 593   1              InitUart0_S0BRG();
 594   1              InitInterrupt();
 595   1      
 596   1              WDT_SetClock_32K_DIV_64_1024ms();
 597   1              WDT_EnReset(); // enable WDT reset MCU
 598   1              WDT_Enable();  // enable WDT
 599   1      }
 600          
 601          void rd_print(u8 *PStr){
 602   1              Uart0SendStr(PStr);
 603   1      }
 604          
 605          void RD_Send_Byte_SPI(u8 data_b){
 606   1                      SPI_nSS=0;                      
 607   1                      SPITransceiver(data_b); 
 608   1                      SPI_nSS=1;
 609   1      }
 610          void RD_Send_String_SPI(u8 *data_str){
 611   1              while(*data_str != NULL){
 612   2                      RD_Send_Byte_SPI(*(data_str++));
C51 COMPILER V9.01   MAIN                                                                  12/31/2024 08:06:11 PAGE 11  

 613   2              }
 614   1      }
 615          
 616          
 617          
 618          void main()
 619          {
 620   1          InitSystem();
 621   1              /*====================UART========================*/
 622   1              Uart0RxIn = 0;
 623   1              Uart0RxOut = 0;
 624   1              Uart0TxIn = 0;
 625   1              Uart0TxOut = 0;
 626   1              bUart0TxFlag = 0;
 627   1              /*================================================*/
 628   1              DelayXms(1000);
 629   1              
 630   1          while(1)
 631   1          {
 632   2                      u8 data_send[7] = {0};
 633   2                      RD_Send_String_SPI(data_send);
 634   2                      rd_print("hello\n");
 635   2                      DelayXms(1000);
 636   2      
 637   2          }
 638   1      }
 639          
 640          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    778    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     73    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
