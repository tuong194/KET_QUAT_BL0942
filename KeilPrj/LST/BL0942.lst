C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE BL0942
OBJECT MODULE PLACED IN .\OBJ\BL0942.obj
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE ..\code\BL0942\BL0942.c BROWSE INCDIR(..\code\BL0942) DEBUG OBJECTEXTEND
                    - PRINT(.\LST\BL0942.lst) OBJECT(.\OBJ\BL0942.obj)

line level    source

   1          #include "./BL0942.H" // SPI hỗ trợ max 900kHz
   2          
   3          extern u16 time_system;
   4          u16 rd_time_tick = 0;
   5          u8 select_led_blink = RD_NONE;
   6          xdata u16 time_scan_btn_old = 0;
   7          xdata u16 time_scan_btn_new = 0;
   8          xdata u16 time_press_start = 0;
   9          xdata u16 time_count_press = 0;
  10          xdata u16 time_start_check_num_btn = 0;
  11          xdata u16 time_count_check_num_btn = 0;
  12          xdata u8 count_btn = 0; // so lan nhan
  13          xdata u8 BTN_STT_NEW = 0;
  14          xdata u8 BTN_STT_OLD = 0;
  15          xdata u8 btn_stt = 0;
  16          xdata u8 check_press = 0; // nhan don hoac nhan giu
  17          xdata u8 check_hold_btn = 0;
  18          xdata u8 have_press = 0;
  19          
  20          xdata u8 flag_start = 0;
  21          u8 rec_data[6] = {0};
  22          xdata u32 U_in;
  23          xdata u32 I_in;
  24          xdata int32_t P_in;
  25          xdata u16 temp_time_check_stuck = 0;
  26          xdata u16 start_time_check_stuck = 0;
  27          xdata u8 flag_start_check_stuck = 0;
  28          xdata u16 rd_time_loop = 0;
  29          
  30          xdata data_bl0942_t data_bl0942 = {0};
  31          // data_bl0942_t *Data_Read =&data_bl0942;
  32          data_flash_t *Read_Flash;
  33          
  34          void Blink_Led(u8 LED_PIN, u8 count_blink)
  35          {
  36   1          static u8 count = 0;
  37   1          if (rd_exceed_ms(rd_time_tick, 1000) && select_led_blink != RD_NONE)
  38   1          {
  39   2              if (LED_PIN == LED_G)
  40   2              {
  41   3                  BLINK_LED(RD_LED_G);
  42   3              }
  43   2              else if (LED_PIN == LED_R)
  44   2              {
  45   3                  BLINK_LED(RD_LED_R);
  46   3              }
  47   2              else if (LED_PIN == ALL_LED)
  48   2              {
  49   3                  BLINK_LED(RD_LED_G);
  50   3                  BLINK_LED(RD_LED_R);
  51   3              }
  52   2              count++;
  53   2              rd_time_tick = get_time_ms();
  54   2              if (rd_time_tick >= 65534)
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 2   

  55   2                  rd_time_tick = 0;
  56   2              if (count == count_blink * 2)
  57   2              {
  58   3                  // OFF_LED(RD_LED_G);
  59   3                  select_led_blink = RD_NONE;
  60   3                  count = 0;
  61   3              }
  62   2          }
  63   1      }
  64          
  65          void Blink_Led_Err(void)
  66          {
  67   1          select_led_blink = LED_R;
  68   1          Blink_Led(LED_R, 3);
  69   1      }
  70          
  71          void Blink_Led_Green(void)
  72          {
  73   1          select_led_blink = LED_G;
  74   1          Blink_Led(LED_G, 3);
  75   1      }
  76          
  77          void Blink_All_Led(void)
  78          {
  79   1          select_led_blink = ALL_LED;
  80   1          Blink_Led(ALL_LED, 3);
  81   1      }
  82          
  83          void Blink_Led_Config(void)
  84          {
  85   1          u8 i = 0;
  86   1          if (!Read_Flash->check_stuck_fan)
  87   1          {
  88   2              ON_LED(RD_LED_G);
  89   2              for (i = 0; i < 6; i++)
  90   2              {
  91   3                  BLINK_LED(RD_LED_G);
  92   3                  DelayXms(150);
  93   3              }
  94   2              OFF_LED(RD_LED_G);
  95   2          }
  96   1      }
  97          
  98          void Blink_Led_Start(void)
  99          {
 100   1          u8 i = 0;
 101   1          OFF_LED(RD_LED_R);
 102   1          ON_LED(RD_LED_G);
 103   1          for (i = 0; i < 6; i++)
 104   1          {
 105   2              BLINK_LED(RD_LED_R);
 106   2              BLINK_LED(RD_LED_G);
 107   2              DelayXms(250);
 108   2          }
 109   1          OFF_LED(RD_LED_R);
 110   1          OFF_LED(RD_LED_G);
 111   1      }
 112          
 113          void RD_Init_flash(void)
 114          {
 115   1          read_all_flash();
 116   1          rd_print("header: ");
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 3   

 117   1          RD_PRINT_HEX(Read_Flash->header);
 118   1          rd_print("tail: ");
 119   1          RD_PRINT_HEX(Read_Flash->tail);
 120   1          rd_print("\n");
 121   1          if (Read_Flash->header != 0x55 && Read_Flash->tail != 0xaa)
 122   1          {
 123   2              rd_print("init flash fail\n");
 124   2              Read_Flash->header = 0x55;
 125   2              Read_Flash->tail = 0xaa;
 126   2              Read_Flash->check_stuck_fan = 0;
 127   2              Read_Flash->P_old = 0; // 20;
 128   2              Read_Flash->P_stuck = Read_Flash->P_old;
 129   2              Read_Flash->I_old = 0; // 0.0992;
 130   2              Read_Flash->I_stuck = Read_Flash->I_old;
 131   2              Read_Flash->U_old = 0; // 220;
 132   2              Read_Flash->relay_stt = 1;
 133   2      
 134   2              // Read_Flash->Z_stuck = 0;
 135   2          }
 136   1          else
 137   1          {
 138   2              rd_print("init flash OK\n");
 139   2          }
 140   1          write_data_fash();
 141   1      }
 142          
 143          uint8_t get_btn(void)
 144          {
 145   1          uint8_t temp_get_btn = 0;
 146   1          if (RD_PIN_BTN == 0)
 147   1          {
 148   2              temp_get_btn = 0;
 149   2          }
 150   1          else
 151   1          {
 152   2              temp_get_btn = 1;
 153   2          }
 154   1          return temp_get_btn;
 155   1      }
 156          
 157          u16 get_time_ms(void)
 158          {
 159   1          return time_system;
 160   1      }
 161          void RD_Scan_Btn(void)
 162          {
 163   1          u16 temp_get_time = 0;
 164   1          temp_get_time = get_time_ms();
 165   1          WDT_Clear();
 166   1          time_scan_btn_new = temp_get_time;
 167   1          if (time_scan_btn_new < time_scan_btn_old)
 168   1              time_scan_btn_old = time_scan_btn_new; // overflow
 169   1          if (time_scan_btn_new - time_scan_btn_old > 10)
 170   1          { // quet phim 10ms/1lan
 171   2              BTN_STT_NEW = get_btn();
 172   2              if (BTN_STT_NEW == 0 && BTN_STT_OLD == 1)
 173   2              { // nhan nut
 174   3                  time_press_start = temp_get_time;
 175   3                  btn_stt = 1;
 176   3              }
 177   2              else if (BTN_STT_NEW == 1 && BTN_STT_OLD == 0)
 178   2              { // nha nut
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 4   

 179   3                  if (time_count_press >= 35 && time_count_press < 600)
 180   3                  {
 181   4                      if (check_hold_btn == 1)
 182   4                      {
 183   5                          rd_print("nha giu\n");
 184   5                          check_hold_btn = 0;
 185   5                      }
 186   4                      else
 187   4                      {
 188   5                          have_press = 1;
 189   5                          check_press = 1;
 190   5                      }
 191   4                  }
 192   3                  else
 193   3                  {
 194   4                      if (time_count_press >= 600)
 195   4                      {
 196   5                          rd_print("nha giu\n");
 197   5                          check_hold_btn = 0;
 198   5                      }
 199   4                  }
 200   3                  btn_stt = 0;
 201   3              }
 202   2              /*check hold btn*/
 203   2              if (btn_stt)
 204   2              {
 205   3                  if (time_press_start > temp_get_time)
 206   3                  {
 207   4                      time_count_press = (65535 - time_press_start) + temp_get_time;
 208   4                  }
 209   3                  else
 210   3                  {
 211   4                      time_count_press = temp_get_time - time_press_start;
 212   4                  }
 213   3                  if (time_count_press >= 3000)
 214   3                  {
 215   4                      have_press = 1;
 216   4                      check_press = 2;
 217   4                      time_press_start = temp_get_time - 500; // (3000 - 500)ms scan 1 phat
 218   4                  }
 219   3              }
 220   2              BTN_STT_OLD = BTN_STT_NEW;
 221   2              time_scan_btn_old = time_scan_btn_new;
 222   2          }
 223   1          /*xu ly nut nhan*/
 224   1          if (have_press)
 225   1          {
 226   2              if (check_press == 1)
 227   2              {
 228   3                  rd_print("an ne\n");
 229   3                  time_start_check_num_btn = temp_get_time;
 230   3                  count_btn++;
 231   3                  check_press = 0;
 232   3              }
 233   2              else if (check_press == 2) // nhan giu config
 234   2              {
 235   3                  if (!Read_Flash->check_stuck_fan && RD_RELAY == 1 && data_bl0942.flag_stuck == RD_AUTO)
 236   3                  {
 237   4                      config_P_I_Stuck();
 238   4                      Blink_Led_Config();
 239   4                  }
 240   3                  count_btn = 0;
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 5   

 241   3                  check_hold_btn = 1;
 242   3                  check_press = 0;
 243   3              }
 244   2              have_press = 0;
 245   2          }
 246   1      
 247   1          /*kiem tra so lan nhan*/
 248   1          if (time_start_check_num_btn > temp_get_time)
 249   1          {
 250   2              time_count_check_num_btn = (65535 - time_start_check_num_btn) + temp_get_time;
 251   2          }
 252   1          else
 253   1          {
 254   2              time_count_check_num_btn = temp_get_time - time_start_check_num_btn;
 255   2          }
 256   1          if (count_btn)
 257   1          {
 258   2              if (time_count_check_num_btn > 600)
 259   2              {
 260   3                  if (count_btn == 1)
 261   3                  {
 262   4                      rd_print("ON OFF\n");
 263   4                      BLINK_LED(RD_RELAY);
 264   4                      OFF_LED(RD_LED_R);
 265   4                      OFF_LED(RD_LED_G);
 266   4                      flag_start_check_stuck = 0;
 267   4                      Read_Flash->check_stuck_fan = 0;
 268   4                      start_time_check_stuck = temp_time_check_stuck;
 269   4                  }
 270   3                  else if (count_btn == 2)
 271   3                  {
 272   4                      rd_print("2 phat\n");
 273   4      
 274   4                  }
 275   3                  else if (count_btn == 3)
 276   3                  {
 277   4                      rd_print("3 phat\n");
 278   4                      data_bl0942.flag_stuck = !data_bl0942.flag_stuck;
 279   4                      rd_print("flag stuck: %d\n\n\n", data_bl0942.flag_stuck);
 280   4                      OFF_LED(RD_LED_R);
 281   4                      OFF_LED(RD_LED_G);
 282   4                      rd_time_tick = get_time_ms();
 283   4                  }
 284   3                  count_btn = 0;
 285   3                  time_count_check_num_btn = 0;
 286   3                  time_start_check_num_btn = temp_get_time;
 287   3              }
 288   2          }
 289   1          else
 290   1          {
 291   2              time_start_check_num_btn = temp_get_time;
 292   2          }
 293   1      }
 294          
 295          void RD_Unlock_Send(void)
 296          {
 297   1          uint8_t data_send[6] = {0};
 298   1          uint16_t CRC_Temp = (0xA8 + USR_WRPROT + 0x55);
 299   1          uint8_t CRC_Check = ~(CRC_Temp & 0xff);
 300   1          data_send[0] = 0xA8;
 301   1          data_send[1] = USR_WRPROT;
 302   1          data_send[2] = 0x00;
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 6   

 303   1          data_send[3] = 0x00;
 304   1          data_send[4] = 0x55;
 305   1          data_send[5] = CRC_Check;
 306   1          RD_Send_String_SPI(data_send);
 307   1      }
 308          
 309          void RD_Send_Setup(uint8_t reg_addr, uint8_t *data_w)
 310          {
 311   1          uint8_t i = 0;
 312   1          uint8_t data_send[6] = {0};
 313   1          uint16_t CRC_Temp = 0xA8 + reg_addr + data_w[0] + data_w[1] + data_w[2];
 314   1          uint8_t CRC_Check = ~(CRC_Temp & 0xff);
 315   1          RD_Unlock_Send();
 316   1          data_send[0] = 0xA8;
 317   1          data_send[1] = reg_addr;
 318   1          data_send[2] = data_w[0];
 319   1          data_send[3] = data_w[1];
 320   1          data_send[4] = data_w[2];
 321   1          data_send[5] = CRC_Check;
 322   1          RD_Send_String_SPI(data_send);
 323   1      
 324   1      #if RD_LOG
                  rd_print("data send: ");
                  for (i = 0; i < 6; i++)
                  {
                      RD_PRINT_HEX(data_send[i]);
                  }
                  rd_print("\n");
              #endif
 332   1      }
 333          
 334          int32_t RD_Read_Data_Signed_SPI(uint8_t reg_addr)
 335          {
 336   1          u32 read_value = 0;
 337   1          uint8_t i = 0;
 338   1          uint8_t tx_data[6] = {0};
 339   1          uint16_t CRC_Temp = 0x58 + reg_addr;
 340   1          uint8_t CRC_Check = ~(CRC_Temp & 0xff);
 341   1          tx_data[0] = 0x58;
 342   1          tx_data[1] = reg_addr;
 343   1          tx_data[2] = 0x00;
 344   1          tx_data[3] = 0x00;
 345   1          tx_data[4] = 0x00;
 346   1          tx_data[5] = 0x00; // CRC_Check;
 347   1          RD_Send_String_SPI(tx_data);
 348   1      
 349   1      #if 1 // RD_LOG
 350   1          rd_print("Data rec reg 0x%02X: ", (unsigned int)reg_addr);
 351   1          for (i = 0; i < 6; i++)
 352   1          {
 353   2              RD_PRINT_HEX(rec_data[i]);
 354   2          }
 355   1          rd_print("\n");
 356   1      #endif
 357   1          CRC_Temp = 0x58 + reg_addr + rec_data[2] + rec_data[3] + rec_data[4];
 358   1          CRC_Check = ~(CRC_Temp & 0xff);
 359   1          if (CRC_Check == rec_data[5])
 360   1          {
 361   2              read_value = ((u32)rec_data[2] << 16) | ((u32)rec_data[3] << 8) | ((u32)rec_data[4]);
 362   2              memset(rec_data, 0, 6);
 363   2              if (read_value & 0x800000)
 364   2              {
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 7   

 365   3                  read_value |= 0xff000000; // mo rong bit dau
 366   3              }
 367   2              // rd_print("value = %ld \n", read_value);
 368   2              // rd_print("-----------------------------\n");
 369   2              return read_value;
 370   2          }
 371   1          memset(rec_data, 0, 6);
 372   1          return 0;
 373   1      }
 374          
 375          u32 RD_Read_Data_SPI(uint8_t reg_addr)
 376          { // get data ko dau
 377   1          u32 read_value = 0;
 378   1          uint8_t i = 0;
 379   1          uint8_t tx_data[6] = {0};
 380   1          uint16_t CRC_Temp = 0x58 + reg_addr;
 381   1          uint8_t CRC_Check = ~(CRC_Temp & 0xff);
 382   1          tx_data[0] = 0x58;
 383   1          tx_data[1] = reg_addr;
 384   1          tx_data[2] = 0x00;
 385   1          tx_data[3] = 0x00;
 386   1          tx_data[4] = 0x00;
 387   1          tx_data[5] = 0x00; // CRC_Check;
 388   1          RD_Send_String_SPI(tx_data);
 389   1      
 390   1      #if RD_LOG
                  rd_print("Data rec reg 0x%02X: ", (unsigned int)reg_addr);
                  for (i = 0; i < 6; i++)
                  {
                      RD_PRINT_HEX(rec_data[i]);
                  }
                  rd_print("\n");
              #endif
 398   1          CRC_Temp = 0x58 + reg_addr + rec_data[2] + rec_data[3] + rec_data[4];
 399   1          CRC_Check = ~(CRC_Temp & 0xff);
 400   1          if (CRC_Check == rec_data[5])
 401   1          {
 402   2              read_value = ((u32)rec_data[2] << 16) | ((u32)rec_data[3] << 8) | ((u32)rec_data[4]);
 403   2              memset(rec_data, 0, 6);
 404   2      #if RD_LOG
                      rd_print("value = %lu\n", read_value);
                      rd_print("-----------------------------\n");
              #endif
 408   2              return read_value;
 409   2          }
 410   1          // rd_print("-----------------------------\n");
 411   1          memset(rec_data, 0, 6);
 412   1          return 0;
 413   1      }
 414          
 415          u8 rd_exceed_ms(u16 ref, u16 span_ms)
 416          {
 417   1          return ((get_time_ms() - ref) >= span_ms);
 418   1      }
 419          
 420          void RD_setup_BL0942(void)
 421          {
 422   1          uint8_t Set_CF_ZX[3] = {0x00, 0x00, 0x23}; // 0010 0011: ZX 10, CF2 00, CF1 11
 423   1          uint8_t Set_Gain[3] = {0x00, 0x00, 0x03};
 424   1          uint8_t Set_Soft_Reset[3] = {0x5a, 0x5a, 0x5a};
 425   1          RD_Send_Setup(GAIN_CR, Set_Gain);          // 0x1A
 426   1          RD_Send_Setup(SOFT_RESET, Set_Soft_Reset); // 0x1C
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 8   

 427   1          RD_Send_Setup(REG_OT_FUNX, Set_CF_ZX);     // 0x18
 428   1          rd_print("SET UP OK!\n\n\n");
 429   1      }
 430          
 431          void read_UIP(void)
 432          {
 433   1          float temp_cal;
 434   1          U_in = RD_Read_Data_SPI(REG_VRMS);
 435   1          temp_cal = 2375.72118f / (73989.0f * 510.0f); // temp_U //= (1.218*(390000*5 + 510)*0.001)
 436   1          data_bl0942.U_hd = U_in * temp_cal;
 437   1          rd_print("U hd: %.2f V, \n", data_bl0942.U_hd);
 438   1          // DelayXms(200);
 439   1      
 440   1          I_in = RD_Read_Data_SPI(REG_IRMS);
 441   1          temp_cal = 1.218 / 305978; // temp_I
 442   1          data_bl0942.I_hd = (I_in * temp_cal);
 443   1          rd_print("I hd: %.4f A, \n", data_bl0942.I_hd);
 444   1          // DelayXms(200);
 445   1      
 446   1          /* Test
 447   1              P_in = RD_Read_Data_Signed_SPI(REG_WATT);
 448   1              temp_cal = 0.001604122;
 449   1              data_bl0942.P_hd = P_in * temp_cal;
 450   1              rd_print("P hieu dung: %.3f W \n", data_bl0942.P_hd);
 451   1      
 452   1              data_bl0942.Cos_Phi = (data_bl0942.P_hd) / ((data_bl0942.U_hd) * (data_bl0942.I_hd));
 453   1              rd_print("Cos phi : %.3f \n\n", data_bl0942.Cos_Phi);
 454   1          */
 455   1          // data_bl0942.Z = data_bl0942.U_hd / data_bl0942.I_hd;
 456   1          // rd_print("Tro khang Z: %.3f \n\n", data_bl0942.Z);
 457   1      
 458   1          if (data_bl0942.I_hd < 0.0001)
 459   1          {
 460   2              data_bl0942.P_hd = 0;
 461   2              data_bl0942.Cos_Phi = 0;
 462   2          }
 463   1          else
 464   1          {
 465   2              P_in = RD_Read_Data_Signed_SPI(REG_WATT);
 466   2              temp_cal = 0.001604122; //=((1.218*1.218)*(390000*5 + 510))/(3537*0.001*510*1000*1000)  temp_P
 467   2              data_bl0942.P_hd = P_in * temp_cal;
 468   2              // rd_print("P read: %.3f W\n", data_bl0942.P_hd);
 469   2              if (data_bl0942.P_hd < 0 || data_bl0942.P_hd > 10000)
 470   2                  data_bl0942.P_hd = 0;
 471   2              rd_print("P hieu dung: %.3f W\n\n", data_bl0942.P_hd);
 472   2          }
 473   1      }
 474          void config_P_I_Stuck(void)
 475          {
 476   1          Read_Flash->P_old = data_bl0942.P_hd;
 477   1          Read_Flash->P_stuck = Read_Flash->P_old;
 478   1          Read_Flash->I_old = data_bl0942.I_hd;
 479   1          Read_Flash->I_stuck = Read_Flash->I_old;
 480   1          Read_Flash->U_old = data_bl0942.U_hd;
 481   1          // Read_Flash->Z_old = data_bl0942.U_hd / data_bl0942.I_hd;
 482   1          // Read_Flash->Z_stuck = Read_Flash->Z_old;
 483   1          write_data_fash();
 484   1          rd_print("config P ket: %.3f W\n\n\n", Read_Flash->P_stuck);
 485   1          // rd_print("config Z ket: %.3f Ohm\n\n\n", Read_Flash->Z_stuck);
 486   1      }
 487          
 488          void update_Pstuck_by_U(void)
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 9   

 489          {
 490   1          data_bl0942.Cos_Phi = data_bl0942.P_hd / (data_bl0942.U_hd * data_bl0942.I_hd);
 491   1          if (CALC_EXCEED(data_bl0942.U_hd, Read_Flash->U_old) > 3)
 492   1          { // U tang 5%
 493   2              Read_Flash->I_old = (float)(0.001609 * data_bl0942.U_hd * data_bl0942.U_hd - 0.2166 * data_bl0942.
             -U_hd + 69.3708) / 1000;
 494   2              Read_Flash->I_stuck = Read_Flash->I_old;
 495   2              Read_Flash->P_old = 0.0006853 * data_bl0942.U_hd * data_bl0942.U_hd - 0.10797 * data_bl0942.U_hd +
             - 10.8147;
 496   2              Read_Flash->P_stuck = Read_Flash->P_old;
 497   2              Read_Flash->U_old = data_bl0942.U_hd;
 498   2              // Read_Flash->Z_old = data_bl0942.U_hd / data_bl0942.I_hd;
 499   2              // Read_Flash->Z_stuck = Read_Flash->Z_old;
 500   2              write_data_fash();
 501   2              rd_print("I ket up: %.3f A\n", Read_Flash->I_stuck);
 502   2              rd_print("P ket up: %.3f W\n\n", Read_Flash->P_stuck);
 503   2          }
 504   1          else if (CALC_LESS(data_bl0942.U_hd, Read_Flash->U_old) > 3)
 505   1          { // U giam 5%
 506   2              Read_Flash->I_old = (float)(0.001609 * data_bl0942.U_hd * data_bl0942.U_hd - 0.2166 * data_bl0942.
             -U_hd + 69.3708) / 1000;
 507   2              Read_Flash->I_stuck = Read_Flash->I_old;
 508   2              Read_Flash->P_old = 0.0006853 * data_bl0942.U_hd * data_bl0942.U_hd - 0.10797 * data_bl0942.U_hd +
             - 10.8147;
 509   2              Read_Flash->P_stuck = Read_Flash->P_old;
 510   2              Read_Flash->U_old = data_bl0942.U_hd;
 511   2              // Read_Flash->Z_old = data_bl0942.U_hd / data_bl0942.I_hd;
 512   2              // Read_Flash->Z_stuck = Read_Flash->Z_old;
 513   2              write_data_fash();
 514   2              rd_print("I ket down: %.3f A\n", Read_Flash->I_stuck);
 515   2              rd_print("P ket down: %.3f W\n\n", Read_Flash->P_stuck);
 516   2          }
 517   1          else if ((CALC_EXCEED(data_bl0942.U_hd, Read_Flash->U_old) < 1) || (CALC_LESS(data_bl0942.U_hd, Read_F
             -lash->U_old) < 1))
 518   1          {
 519   2              // Read_Flash->U_old = data_bl0942.U_hd;
 520   2          }
 521   1      }
 522          
 523          void loop_check_stuck_fan(void)
 524          {
 525   1          if (data_bl0942.U_hd > 100 && data_bl0942.P_hd > 5 && Read_Flash->P_old > 0)
 526   1          {
 527   2              if (start_time_check_stuck >= 65530)
 528   2                  start_time_check_stuck = 0;
 529   2              if (Read_Flash->check_stuck_fan == 0 && Read_Flash->P_old > 0)
 530   2              {
 531   3                  if (!flag_start_check_stuck)
 532   3                  {
 533   4                      if (rd_exceed_ms(start_time_check_stuck, TIMEOUT_START_CHECK))
 534   4                      {
 535   5                          start_time_check_stuck = temp_time_check_stuck;
 536   5                          flag_start_check_stuck = 1;
 537   5                          rd_print("start check stuck\n\n\n");
 538   5                      }
 539   4                  }
 540   3                  else
 541   3                  {
 542   4                      float temp_check_P = 0;
 543   4                      update_Pstuck_by_U();
 544   4                      if (data_bl0942.P_hd > Read_Flash->P_old)
 545   4                      {
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 10  

 546   5                          if (data_bl0942.I_hd > Read_Flash->I_old)
 547   5                          {
 548   6                              temp_check_P = ((data_bl0942.P_hd - Read_Flash->P_old) / Read_Flash->P_stuck) * 10
             -0;
 549   6                              // if (((data_bl0942.I_hd - Read_Flash->I_old) / Read_Flash->I_stuck) * 1000 >= 5)
 550   6                              // { // I > 0.5%
 551   6                              //     temp_check_P = ((data_bl0942.P_hd - Read_Flash->P_old) / Read_Flash->P_stuc
             -k) * 100;
 552   6                              // }
 553   6                          }
 554   5                          if (data_bl0942.P_hd > Read_Flash->P_stuck && data_bl0942.I_hd > Read_Flash->I_stuck)
 555   5                          {
 556   6                              Read_Flash->P_old = Read_Flash->P_stuck;
 557   6                              Read_Flash->I_old = Read_Flash->I_stuck;
 558   6                          }
 559   5                      }
 560   4                      else
 561   4                      {
 562   5                          // neu cong suat giam 2%
 563   5                          if (((Read_Flash->P_old - data_bl0942.P_hd) / Read_Flash->P_old) * 100 < 2)
 564   5                          {
 565   6                              Read_Flash->P_old = data_bl0942.P_hd;
 566   6                              Read_Flash->I_old = data_bl0942.I_hd;
 567   6                          }
 568   5                      }
 569   4      
 570   4                      if (temp_check_P >= P_THRESHOLD)
 571   4                      {
 572   5                          Read_Flash->check_stuck_fan = 1;
 573   5                          rd_print("delta P: %.2f \n", temp_check_P);
 574   5                          rd_print("VUOT MUC PICKLEBALL\n\n\n");
 575   5                          OFF_RELAY();
 576   5                          OFF_LED(RD_LED_G);
 577   5                          rd_time_tick = get_time_ms();
 578   5                      }
 579   4                  }
 580   3              }
 581   2              else
 582   2              {
 583   3                  start_time_check_stuck = temp_time_check_stuck;
 584   3              }
 585   2          }
 586   1          else
 587   1          {
 588   2              start_time_check_stuck = temp_time_check_stuck;
 589   2              flag_start_check_stuck = 0;
 590   2          }
 591   1      }
 592          
 593          void rd_start_init(void)
 594          {
 595   1          ON_RELAY();
 596   1          Blink_Led_Start();
 597   1          DelayXms(1000);
 598   1          data_bl0942.flag_stuck = RD_AUTO;
 599   1      }
 600          
 601          void rd_loop(void)
 602          {
 603   1          temp_time_check_stuck = get_time_ms();
 604   1          if (flag_start == 0)
 605   1          {
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 11  

 606   2              RD_Init_flash();
 607   2              RD_setup_BL0942();
 608   2              rd_time_loop = get_time_ms();
 609   2              flag_start = 1;
 610   2              rd_print("P ket init: %.3f W\n", Read_Flash->P_stuck);
 611   2          }
 612   1          RD_Scan_Btn();
 613   1      
 614   1          if (data_bl0942.flag_stuck == RD_AUTO)
 615   1          {
 616   2              if (rd_exceed_ms(rd_time_loop, TIME_LOOP))
 617   2              {
 618   3                  read_UIP();
 619   3                  loop_check_stuck_fan();
 620   3                  rd_time_loop = get_time_ms();
 621   3                  if (rd_time_loop >= 65530)
 622   3                      rd_time_loop = 0;
 623   3              }
 624   2              if (Read_Flash->check_stuck_fan == 1)
 625   2              {
 626   3                  Blink_Led_Err();
 627   3              }
 628   2              else
 629   2              {
 630   3                  Blink_Led_Green();
 631   3              }
 632   2          }
 633   1          else
 634   1          {
 635   2              Blink_All_Led();
 636   2          }
 637   1      }
 638          
 639          /*
 640          void loop_check_stuck_fan_by_Z(void)
 641          {
 642              if (data_bl0942.P_hd > 10 && Read_Flash->Z_stuck > 0)
 643              {
 644                  if (start_time_check_stuck >= 65530)
 645                      start_time_check_stuck = 0;
 646                  if (Read_Flash->check_stuck_fan == 0)
 647                  {
 648                      if (!flag_start_check_stuck)
 649                      {
 650                          if (rd_exceed_ms(start_time_check_stuck, TIMEOUT_START_CHECK))
 651                          {
 652                              start_time_check_stuck = temp_time_check_stuck;
 653                              flag_start_check_stuck = 1;
 654                              rd_print("start check stuck\n\n\n");
 655                          }
 656                      }
 657                      else
 658                      {
 659                          update_Pstuck_by_U();
 660                          if (CALC_LESS(data_bl0942.Z, Read_Flash->Z_stuck) >= 8)
 661                          {
 662                              Read_Flash->check_stuck_fan = 1;
 663                              rd_print("tro khang: %.3f \n", data_bl0942.Z);
 664                              rd_print("VUOT MUC PICKLEBALL\n\n\n");
 665                              OFF_RELAY();
 666                          }
 667          
C51 COMPILER V9.01   BL0942                                                                02/18/2025 08:26:11 PAGE 12  

 668                      }
 669                  }
 670                  else
 671                  {
 672                      start_time_check_stuck = temp_time_check_stuck;
 673                  }
 674              }
 675              else
 676              {
 677                  start_time_check_stuck = temp_time_check_stuck;
 678                  flag_start_check_stuck = 0;
 679              }
 680          }
 681          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4183    ----
   CONSTANT SIZE    =    421    ----
   XDATA SIZE       =     56    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      68
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
